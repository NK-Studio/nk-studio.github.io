{
  "api/index.html": {
    "href": "api/index.html",
    "title": "| Scene System",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "api/UnityEditor.SceneSystem.html": {
    "href": "api/UnityEditor.SceneSystem.html",
    "title": "Namespace UnityEditor.SceneSystem | Scene System",
    "keywords": "Namespace UnityEditor.SceneSystem Classes SceneLoaderInspector"
  },
  "api/UnityEditor.SceneSystem.SceneLoaderInspector.html": {
    "href": "api/UnityEditor.SceneSystem.SceneLoaderInspector.html",
    "title": "Class SceneLoaderInspector | Scene System",
    "keywords": "Class SceneLoaderInspector Inheritance System.Object SceneLoaderInspector Namespace: UnityEditor.SceneSystem Assembly: Unity.SceneSystem.Editor.dll Syntax public class SceneLoaderInspector : Editor Constructors SceneLoaderInspector() Declaration public SceneLoaderInspector() Methods CreateInspectorGUI() Declaration public override VisualElement CreateInspectorGUI() Returns Type Description UnityEngine.UIElements.VisualElement"
  },
  "api/UnityEngine.SceneSystem.html": {
    "href": "api/UnityEngine.SceneSystem.html",
    "title": "Namespace UnityEngine.SceneSystem | Scene System",
    "keywords": "Namespace UnityEngine.SceneSystem Classes LoadingActionSkipMode LoadMultiSceneMode LoadSceneOperationHandle LoadSceneOperationHandleExtensions SceneContainer SceneHandler SceneLoader Scenes WithLoadingScreenExtensions Interfaces ILoadSceneCallbackReceiver ISceneContainerCallbackReceiver ISceneHandler"
  },
  "api/UnityEngine.SceneSystem.ILoadSceneCallbackReceiver.html": {
    "href": "api/UnityEngine.SceneSystem.ILoadSceneCallbackReceiver.html",
    "title": "Interface ILoadSceneCallbackReceiver | Scene System",
    "keywords": "Interface ILoadSceneCallbackReceiver Namespace: UnityEngine.SceneSystem Assembly: Unity.SceneSystem.Runtime.dll Syntax public interface ILoadSceneCallbackReceiver Methods OnActiveSceneChanged(Scene, Scene) Declaration void OnActiveSceneChanged(Scene current, Scene next) Parameters Type Name Description UnityEngine.SceneManagement.Scene current UnityEngine.SceneManagement.Scene next OnLoad(Scene, LoadSceneMode) Declaration void OnLoad(Scene scene, LoadSceneMode loadSceneMode) Parameters Type Name Description UnityEngine.SceneManagement.Scene scene UnityEngine.SceneManagement.LoadSceneMode loadSceneMode OnUnload(Scene) Declaration void OnUnload(Scene scene) Parameters Type Name Description UnityEngine.SceneManagement.Scene scene"
  },
  "api/UnityEngine.SceneSystem.ISceneContainerCallbackReceiver.html": {
    "href": "api/UnityEngine.SceneSystem.ISceneContainerCallbackReceiver.html",
    "title": "Interface ISceneContainerCallbackReceiver | Scene System",
    "keywords": "Interface ISceneContainerCallbackReceiver Namespace: UnityEngine.SceneSystem Assembly: Unity.SceneSystem.Runtime.dll Syntax public interface ISceneContainerCallbackReceiver Methods OnAfterPop(string, string) Declaration void OnAfterPop(string enter, string exit) Parameters Type Name Description string enter string exit OnAfterPush(string, string) Declaration void OnAfterPush(string enter, string exit) Parameters Type Name Description string enter string exit OnBeforePop(string, string) Declaration void OnBeforePop(string enter, string exit) Parameters Type Name Description string enter string exit OnBeforePush(string, string) Declaration void OnBeforePush(string enter, string exit) Parameters Type Name Description string enter string exit"
  },
  "api/UnityEngine.SceneSystem.ISceneHandler.html": {
    "href": "api/UnityEngine.SceneSystem.ISceneHandler.html",
    "title": "Interface ISceneHandler | Scene System",
    "keywords": "Interface ISceneHandler Namespace: UnityEngine.SceneSystem Assembly: Unity.SceneSystem.Runtime.dll Syntax public interface ISceneHandler Methods GetLoadSceneOperation(string, LoadSceneMode) Declaration LoadSceneOperation GetLoadSceneOperation(string sceneName, LoadSceneMode loadSceneMode) Parameters Type Name Description string sceneName UnityEngine.SceneManagement.LoadSceneMode loadSceneMode Returns Type Description LoadSceneOperation GetUnloadSceneOperation(string) Declaration LoadSceneOperation GetUnloadSceneOperation(string sceneName) Parameters Type Name Description string sceneName Returns Type Description LoadSceneOperation Load(string, LoadSceneMode) Declaration void Load(string sceneName, LoadSceneMode loadSceneMode) Parameters Type Name Description string sceneName UnityEngine.SceneManagement.LoadSceneMode loadSceneMode LoadAsync(string, LoadSceneMode) Declaration LoadSceneOperationHandle LoadAsync(string sceneName, LoadSceneMode loadSceneMode) Parameters Type Name Description string sceneName UnityEngine.SceneManagement.LoadSceneMode loadSceneMode Returns Type Description LoadSceneOperationHandle Unload(string) Declaration void Unload(string sceneName) Parameters Type Name Description string sceneName UnloadAsync(string) Declaration LoadSceneOperationHandle UnloadAsync(string sceneName) Parameters Type Name Description string sceneName Returns Type Description LoadSceneOperationHandle"
  },
  "api/UnityEngine.SceneSystem.LoadingActionSkipMode.html": {
    "href": "api/UnityEngine.SceneSystem.LoadingActionSkipMode.html",
    "title": "Class LoadingActionSkipMode | Scene System",
    "keywords": "Class LoadingActionSkipMode Inheritance System.Object LoadingActionSkipMode Namespace: UnityEngine.SceneSystem Assembly: Unity.SceneSystem.Runtime.dll Syntax public sealed class LoadingActionSkipMode : Enum Fields AnyKey Declaration public const LoadingActionSkipMode AnyKey = 1 Field Value Type Description LoadingActionSkipMode InstantComplete Declaration public const LoadingActionSkipMode InstantComplete = 0 Field Value Type Description LoadingActionSkipMode Manual Declaration public const LoadingActionSkipMode Manual = 2 Field Value Type Description LoadingActionSkipMode value__ Declaration public int value__ Field Value Type Description int"
  },
  "api/UnityEngine.SceneSystem.LoadMultiSceneMode.html": {
    "href": "api/UnityEngine.SceneSystem.LoadMultiSceneMode.html",
    "title": "Class LoadMultiSceneMode | Scene System",
    "keywords": "Class LoadMultiSceneMode Inheritance System.Object LoadMultiSceneMode Namespace: UnityEngine.SceneSystem Assembly: Unity.SceneSystem.Runtime.dll Syntax public sealed class LoadMultiSceneMode : Enum Fields Parallel Declaration public const LoadMultiSceneMode Parallel = 0 Field Value Type Description LoadMultiSceneMode Sequential Declaration public const LoadMultiSceneMode Sequential = 1 Field Value Type Description LoadMultiSceneMode value__ Declaration public int value__ Field Value Type Description int"
  },
  "api/UnityEngine.SceneSystem.LoadSceneOperationHandle.html": {
    "href": "api/UnityEngine.SceneSystem.LoadSceneOperationHandle.html",
    "title": "Class LoadSceneOperationHandle | Scene System",
    "keywords": "Class LoadSceneOperationHandle Inheritance System.Object LoadSceneOperationHandle Namespace: UnityEngine.SceneSystem Assembly: Unity.SceneSystem.Runtime.dll Syntax public sealed class LoadSceneOperationHandle : ValueType Constructors LoadSceneOperationHandle(LoadSceneOperationBase) Declaration public LoadSceneOperationHandle(LoadSceneOperationBase operation) Parameters Type Name Description LoadSceneOperationBase operation Properties IsDone Declaration public bool IsDone { get; } Property Value Type Description bool IsValid Declaration public bool IsValid { get; } Property Value Type Description bool Progress Declaration public float Progress { get; } Property Value Type Description float Methods AllowSceneActivation(bool) Declaration public void AllowSceneActivation(bool allowSceneActivation) Parameters Type Name Description bool allowSceneActivation Events onCompleted Declaration public event Action onCompleted Event Type Type Description System.Action Extension Methods LoadSceneOperationHandleExtensions.ToTask(LoadSceneOperationHandle, CancellationToken) LoadSceneOperationHandleExtensions.ToYieldInteraction(LoadSceneOperationHandle) WithLoadingScreenExtensions.WithLoadingScreen(LoadSceneOperationHandle, SceneLoader)"
  },
  "api/UnityEngine.SceneSystem.LoadSceneOperationHandleExtensions.html": {
    "href": "api/UnityEngine.SceneSystem.LoadSceneOperationHandleExtensions.html",
    "title": "Class LoadSceneOperationHandleExtensions | Scene System",
    "keywords": "Class LoadSceneOperationHandleExtensions Inheritance System.Object LoadSceneOperationHandleExtensions Namespace: UnityEngine.SceneSystem Assembly: Unity.SceneSystem.Runtime.dll Syntax public static class LoadSceneOperationHandleExtensions : Object Methods ToTask(LoadSceneOperationHandle, CancellationToken) Declaration public static Task ToTask(this LoadSceneOperationHandle self, CancellationToken cancellationToken = null) Parameters Type Name Description LoadSceneOperationHandle self System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task ToYieldInteraction(LoadSceneOperationHandle) Declaration public static IEnumerator ToYieldInteraction(this LoadSceneOperationHandle self) Parameters Type Name Description LoadSceneOperationHandle self Returns Type Description System.Collections.IEnumerator"
  },
  "api/UnityEngine.SceneSystem.LoadSceneOperations.CompletedLoadSceneOperation.html": {
    "href": "api/UnityEngine.SceneSystem.LoadSceneOperations.CompletedLoadSceneOperation.html",
    "title": "Class CompletedLoadSceneOperation | Scene System",
    "keywords": "Class CompletedLoadSceneOperation Inheritance System.Object LoadSceneOperationBase CompletedLoadSceneOperation Namespace: UnityEngine.SceneSystem.LoadSceneOperations Assembly: Unity.SceneSystem.Runtime.dll Syntax public sealed class CompletedLoadSceneOperation : LoadSceneOperationBase Constructors CompletedLoadSceneOperation() Declaration public CompletedLoadSceneOperation() Properties HasExecuted Declaration public override bool HasExecuted { get; } Property Value Type Description bool Overrides LoadSceneOperationBase.HasExecuted IsDone Declaration public override bool IsDone { get; } Property Value Type Description bool Overrides LoadSceneOperationBase.IsDone Progress Declaration public override float Progress { get; } Property Value Type Description float Overrides LoadSceneOperationBase.Progress Methods AllowSceneActivation(bool) Declaration public override void AllowSceneActivation(bool allowSceneActivation) Parameters Type Name Description bool allowSceneActivation Overrides LoadSceneOperationBase.AllowSceneActivation(bool) Execute() Declaration public override LoadSceneOperationHandle Execute() Returns Type Description LoadSceneOperationHandle Overrides LoadSceneOperationBase.Execute() Events onCompleted Declaration public override event Action onCompleted Event Type Type Description System.Action Overrides LoadSceneOperationBase.onCompleted"
  },
  "api/UnityEngine.SceneSystem.LoadSceneOperations.ConcatLoadSceneOperation.html": {
    "href": "api/UnityEngine.SceneSystem.LoadSceneOperations.ConcatLoadSceneOperation.html",
    "title": "Class ConcatLoadSceneOperation | Scene System",
    "keywords": "Class ConcatLoadSceneOperation Inheritance System.Object LoadSceneOperationBase ConcatLoadSceneOperation Namespace: UnityEngine.SceneSystem.LoadSceneOperations Assembly: Unity.SceneSystem.Runtime.dll Syntax public sealed class ConcatLoadSceneOperation : LoadSceneOperationBase Constructors ConcatLoadSceneOperation(params LoadSceneOperationBase[]) Declaration public ConcatLoadSceneOperation(params LoadSceneOperationBase[] operations) Parameters Type Name Description LoadSceneOperationBase[] operations Properties HasExecuted Declaration public override bool HasExecuted { get; } Property Value Type Description bool Overrides LoadSceneOperationBase.HasExecuted IsDone Declaration public override bool IsDone { get; } Property Value Type Description bool Overrides LoadSceneOperationBase.IsDone Progress Declaration public override float Progress { get; } Property Value Type Description float Overrides LoadSceneOperationBase.Progress Methods AllowSceneActivation(bool) Declaration public override void AllowSceneActivation(bool allowSceneActivation) Parameters Type Name Description bool allowSceneActivation Overrides LoadSceneOperationBase.AllowSceneActivation(bool) Execute() Declaration public override LoadSceneOperationHandle Execute() Returns Type Description LoadSceneOperationHandle Overrides LoadSceneOperationBase.Execute() Events onCompleted Declaration public override event Action onCompleted Event Type Type Description System.Action Overrides LoadSceneOperationBase.onCompleted"
  },
  "api/UnityEngine.SceneSystem.LoadSceneOperations.html": {
    "href": "api/UnityEngine.SceneSystem.LoadSceneOperations.html",
    "title": "Namespace UnityEngine.SceneSystem.LoadSceneOperations | Scene System",
    "keywords": "Namespace UnityEngine.SceneSystem.LoadSceneOperations Classes CompletedLoadSceneOperation ConcatLoadSceneOperation LoadSceneOperation LoadSceneOperationBase MergeLoadSceneOperation"
  },
  "api/UnityEngine.SceneSystem.LoadSceneOperations.LoadSceneOperation.html": {
    "href": "api/UnityEngine.SceneSystem.LoadSceneOperations.LoadSceneOperation.html",
    "title": "Class LoadSceneOperation | Scene System",
    "keywords": "Class LoadSceneOperation Inheritance System.Object LoadSceneOperationBase LoadSceneOperation Namespace: UnityEngine.SceneSystem.LoadSceneOperations Assembly: Unity.SceneSystem.Runtime.dll Syntax public sealed class LoadSceneOperation : LoadSceneOperationBase Constructors LoadSceneOperation(Func<AsyncOperation>) Declaration public LoadSceneOperation(Func<AsyncOperation> asyncOperationFunc) Parameters Type Name Description System.Func<><AsyncOperation> asyncOperationFunc Properties HasExecuted Declaration public override bool HasExecuted { get; } Property Value Type Description bool Overrides LoadSceneOperationBase.HasExecuted IsDone Declaration public override bool IsDone { get; } Property Value Type Description bool Overrides LoadSceneOperationBase.IsDone Progress Declaration public override float Progress { get; } Property Value Type Description float Overrides LoadSceneOperationBase.Progress Methods AllowSceneActivation(bool) Declaration public override void AllowSceneActivation(bool allowSceneActivation) Parameters Type Name Description bool allowSceneActivation Overrides LoadSceneOperationBase.AllowSceneActivation(bool) Execute() Declaration public override LoadSceneOperationHandle Execute() Returns Type Description LoadSceneOperationHandle Overrides LoadSceneOperationBase.Execute() Events onCompleted Declaration public override event Action onCompleted Event Type Type Description System.Action Overrides LoadSceneOperationBase.onCompleted"
  },
  "api/UnityEngine.SceneSystem.LoadSceneOperations.LoadSceneOperationBase.html": {
    "href": "api/UnityEngine.SceneSystem.LoadSceneOperations.LoadSceneOperationBase.html",
    "title": "Class LoadSceneOperationBase | Scene System",
    "keywords": "Class LoadSceneOperationBase Inheritance System.Object LoadSceneOperationBase CompletedLoadSceneOperation ConcatLoadSceneOperation LoadSceneOperation MergeLoadSceneOperation Namespace: UnityEngine.SceneSystem.LoadSceneOperations Assembly: Unity.SceneSystem.Runtime.dll Syntax public abstract class LoadSceneOperationBase : Object Constructors LoadSceneOperationBase() Declaration protected LoadSceneOperationBase() Properties HasExecuted Declaration public abstract bool HasExecuted { get; } Property Value Type Description bool IsDone Declaration public abstract bool IsDone { get; } Property Value Type Description bool Progress Declaration public abstract float Progress { get; } Property Value Type Description float Methods AllowSceneActivation(bool) Declaration public abstract void AllowSceneActivation(bool allowSceneActivation) Parameters Type Name Description bool allowSceneActivation Execute() Declaration public abstract LoadSceneOperationHandle Execute() Returns Type Description LoadSceneOperationHandle Events onCompleted Declaration public abstract event Action onCompleted Event Type Type Description System.Action"
  },
  "api/UnityEngine.SceneSystem.LoadSceneOperations.MergeLoadSceneOperation.html": {
    "href": "api/UnityEngine.SceneSystem.LoadSceneOperations.MergeLoadSceneOperation.html",
    "title": "Class MergeLoadSceneOperation | Scene System",
    "keywords": "Class MergeLoadSceneOperation Inheritance System.Object LoadSceneOperationBase MergeLoadSceneOperation Namespace: UnityEngine.SceneSystem.LoadSceneOperations Assembly: Unity.SceneSystem.Runtime.dll Syntax public sealed class MergeLoadSceneOperation : LoadSceneOperationBase Constructors MergeLoadSceneOperation(params LoadSceneOperationBase[]) Declaration public MergeLoadSceneOperation(params LoadSceneOperationBase[] operations) Parameters Type Name Description LoadSceneOperationBase[] operations Properties HasExecuted Declaration public override bool HasExecuted { get; } Property Value Type Description bool Overrides LoadSceneOperationBase.HasExecuted IsDone Declaration public override bool IsDone { get; } Property Value Type Description bool Overrides LoadSceneOperationBase.IsDone Progress Declaration public override float Progress { get; } Property Value Type Description float Overrides LoadSceneOperationBase.Progress Methods AllowSceneActivation(bool) Declaration public override void AllowSceneActivation(bool allowSceneActivation) Parameters Type Name Description bool allowSceneActivation Overrides LoadSceneOperationBase.AllowSceneActivation(bool) Execute() Declaration public override LoadSceneOperationHandle Execute() Returns Type Description LoadSceneOperationHandle Overrides LoadSceneOperationBase.Execute() Events onCompleted Declaration public override event Action onCompleted Event Type Type Description System.Action Overrides LoadSceneOperationBase.onCompleted"
  },
  "api/UnityEngine.SceneSystem.SceneContainer.html": {
    "href": "api/UnityEngine.SceneSystem.SceneContainer.html",
    "title": "Class SceneContainer | Scene System",
    "keywords": "Class SceneContainer Inheritance System.Object SceneContainer Namespace: UnityEngine.SceneSystem Assembly: Unity.SceneSystem.Runtime.dll Syntax public sealed class SceneContainer : Object Properties IsLoading Declaration public bool IsLoading { get; } Property Value Type Description bool StackCount Declaration public int StackCount { get; } Property Value Type Description int Methods AddCallbackReceiver(ISceneContainerCallbackReceiver) Declaration public void AddCallbackReceiver(ISceneContainerCallbackReceiver receiver) Parameters Type Name Description ISceneContainerCallbackReceiver receiver Build() Declaration public LoadSceneOperationHandle Build() Returns Type Description LoadSceneOperationHandle ClearStack() Declaration public LoadSceneOperationHandle ClearStack() Returns Type Description LoadSceneOperationHandle Create() Declaration public static SceneContainer Create() Returns Type Description SceneContainer Pop() Declaration public LoadSceneOperationHandle Pop() Returns Type Description LoadSceneOperationHandle Push(string) Declaration public LoadSceneOperationHandle Push(string key) Parameters Type Name Description string key Returns Type Description LoadSceneOperationHandle Register(string, int, int) Declaration public void Register(string key, int sceneBuildIndex, int order = 0) Parameters Type Name Description string key int sceneBuildIndex int order Register(string, string, int) Declaration public void Register(string key, string sceneName, int order = 0) Parameters Type Name Description string key string sceneName int order RegisterPermanent(int, int) Declaration public void RegisterPermanent(int sceneBuildIndex, int order = 0) Parameters Type Name Description int sceneBuildIndex int order RegisterPermanent(string, int) Declaration public void RegisterPermanent(string sceneName, int order = 0) Parameters Type Name Description string sceneName int order Release() Declaration public LoadSceneOperationHandle Release() Returns Type Description LoadSceneOperationHandle RemoveCallbackReceiver(ISceneContainerCallbackReceiver) Declaration public void RemoveCallbackReceiver(ISceneContainerCallbackReceiver receiver) Parameters Type Name Description ISceneContainerCallbackReceiver receiver Events OnAfterPop Declaration public event Action<string, string> OnAfterPop Event Type Type Description System.Action<,><string, string> OnAfterPush Declaration public event Action<string, string> OnAfterPush Event Type Type Description System.Action<,><string, string> OnBeforePop Declaration public event Action<string, string> OnBeforePop Event Type Type Description System.Action<,><string, string> OnBeforePush Declaration public event Action<string, string> OnBeforePush Event Type Type Description System.Action<,><string, string>"
  },
  "api/UnityEngine.SceneSystem.SceneHandler.html": {
    "href": "api/UnityEngine.SceneSystem.SceneHandler.html",
    "title": "Class SceneHandler | Scene System",
    "keywords": "Class SceneHandler Inheritance System.Object SceneHandler Implements ISceneHandler Namespace: UnityEngine.SceneSystem Assembly: Unity.SceneSystem.Runtime.dll Syntax public sealed class SceneHandler : Object, ISceneHandler Constructors SceneHandler() Declaration public SceneHandler() Methods GetLoadSceneOperation(string, LoadSceneMode) Declaration public LoadSceneOperation GetLoadSceneOperation(string sceneName, LoadSceneMode loadSceneMode) Parameters Type Name Description string sceneName UnityEngine.SceneManagement.LoadSceneMode loadSceneMode Returns Type Description LoadSceneOperation GetUnloadSceneOperation(string) Declaration public LoadSceneOperation GetUnloadSceneOperation(string sceneName) Parameters Type Name Description string sceneName Returns Type Description LoadSceneOperation Load(string, LoadSceneMode) Declaration public void Load(string sceneName, LoadSceneMode loadSceneMode) Parameters Type Name Description string sceneName UnityEngine.SceneManagement.LoadSceneMode loadSceneMode LoadAsync(string, LoadSceneMode) Declaration public LoadSceneOperationHandle LoadAsync(string sceneName, LoadSceneMode loadSceneMode) Parameters Type Name Description string sceneName UnityEngine.SceneManagement.LoadSceneMode loadSceneMode Returns Type Description LoadSceneOperationHandle Unload(string) Declaration public void Unload(string sceneName) Parameters Type Name Description string sceneName UnloadAsync(string) Declaration public LoadSceneOperationHandle UnloadAsync(string sceneName) Parameters Type Name Description string sceneName Returns Type Description LoadSceneOperationHandle Implements ISceneHandler"
  },
  "api/UnityEngine.SceneSystem.SceneLoader.html": {
    "href": "api/UnityEngine.SceneSystem.SceneLoader.html",
    "title": "Class SceneLoader | Scene System",
    "keywords": "Class SceneLoader Inheritance System.Object SceneLoader Namespace: UnityEngine.SceneSystem Assembly: Unity.SceneSystem.Runtime.dll Syntax public class SceneLoader : MonoBehaviour Constructors SceneLoader() Declaration public SceneLoader() Fields DestroyOnCompleted Declaration public bool DestroyOnCompleted Field Value Type Description bool LoadStyle Declaration public LoadSceneMode LoadStyle Field Value Type Description UnityEngine.SceneManagement.LoadSceneMode MinimumLoadingTime Declaration public float MinimumLoadingTime Field Value Type Description float onCompleted Declaration public UnityEvent onCompleted Field Value Type Description UnityEngine.Events.UnityEvent onLoadCompleted Declaration public UnityEvent onLoadCompleted Field Value Type Description UnityEngine.Events.UnityEvent onLoading Declaration public UnityEvent<float> onLoading Field Value Type Description UnityEngine.Events.UnityEvent<><float> SkipMode Declaration public LoadingActionSkipMode SkipMode Field Value Type Description LoadingActionSkipMode Methods AllowCompletion() Declaration public void AllowCompletion() GetLoadScene() Declaration public SceneReference GetLoadScene() Returns Type Description UnityEngine.SceneReference GetLoadScenes() Declaration public SceneReference[] GetLoadScenes() Returns Type Description UnityEngine.SceneReference[]"
  },
  "api/UnityEngine.SceneSystem.Scenes.html": {
    "href": "api/UnityEngine.SceneSystem.Scenes.html",
    "title": "Class Scenes | Scene System",
    "keywords": "Class Scenes Inheritance System.Object Scenes Namespace: UnityEngine.SceneSystem Assembly: Unity.SceneSystem.Runtime.dll Syntax public static class Scenes : Object Properties Count Declaration public static int Count { get; } Property Value Type Description int CountInBuildSettings Declaration public static int CountInBuildSettings { get; } Property Value Type Description int Loader Declaration public static ISceneHandler Loader { get; set; } Property Value Type Description ISceneHandler Methods AddCallbackReceiver(ILoadSceneCallbackReceiver) Declaration public static void AddCallbackReceiver(ILoadSceneCallbackReceiver receiver) Parameters Type Name Description ILoadSceneCallbackReceiver receiver CreateScene(string, CreateSceneParameters) Declaration public static void CreateScene(string sceneName, CreateSceneParameters parameters) Parameters Type Name Description string sceneName UnityEngine.SceneManagement.CreateSceneParameters parameters CreateScene(string) Declaration public static void CreateScene(string sceneName) Parameters Type Name Description string sceneName GetActiveScene() Declaration public static Scene GetActiveScene() Returns Type Description UnityEngine.SceneManagement.Scene GetSceneAt(int) Declaration public static Scene GetSceneAt(int index) Parameters Type Name Description int index Returns Type Description UnityEngine.SceneManagement.Scene GetSceneByBuildIndex(int) Declaration public static Scene GetSceneByBuildIndex(int buildIndex) Parameters Type Name Description int buildIndex Returns Type Description UnityEngine.SceneManagement.Scene GetSceneByName(string) Declaration public static Scene GetSceneByName(string sceneName) Parameters Type Name Description string sceneName Returns Type Description UnityEngine.SceneManagement.Scene GetSceneByPath(string) Declaration public static Scene GetSceneByPath(string scenePath) Parameters Type Name Description string scenePath Returns Type Description UnityEngine.SceneManagement.Scene LoadScene(int, LoadSceneMode) Declaration public static void LoadScene(int sceneBuildIndex, LoadSceneMode loadSceneMode = 0) Parameters Type Name Description int sceneBuildIndex UnityEngine.SceneManagement.LoadSceneMode loadSceneMode LoadScene(string, LoadSceneMode) Declaration public static void LoadScene(string sceneName, LoadSceneMode loadSceneMode = 0) Parameters Type Name Description string sceneName UnityEngine.SceneManagement.LoadSceneMode loadSceneMode LoadScene(SceneReference, LoadSceneMode) Declaration public static void LoadScene(SceneReference sceneReference, LoadSceneMode loadSceneMode = 0) Parameters Type Name Description UnityEngine.SceneReference sceneReference UnityEngine.SceneManagement.LoadSceneMode loadSceneMode LoadSceneAsync(int, LoadSceneMode) Declaration public static LoadSceneOperationHandle LoadSceneAsync(int sceneBuildIndex, LoadSceneMode loadSceneMode = 0) Parameters Type Name Description int sceneBuildIndex UnityEngine.SceneManagement.LoadSceneMode loadSceneMode Returns Type Description LoadSceneOperationHandle LoadSceneAsync(string, LoadSceneMode) Declaration public static LoadSceneOperationHandle LoadSceneAsync(string sceneName, LoadSceneMode loadSceneMode = 0) Parameters Type Name Description string sceneName UnityEngine.SceneManagement.LoadSceneMode loadSceneMode Returns Type Description LoadSceneOperationHandle LoadSceneAsync(SceneReference, LoadSceneMode) Declaration public static LoadSceneOperationHandle LoadSceneAsync(SceneReference sceneReference, LoadSceneMode loadSceneMode = 0) Parameters Type Name Description UnityEngine.SceneReference sceneReference UnityEngine.SceneManagement.LoadSceneMode loadSceneMode Returns Type Description LoadSceneOperationHandle LoadScenes(params int[]) Declaration public static void LoadScenes(params int[] sceneBuildIndexes) Parameters Type Name Description int[] sceneBuildIndexes LoadScenes(params string[]) Declaration public static void LoadScenes(params string[] sceneNames) Parameters Type Name Description string[] sceneNames LoadScenes(params SceneReference[]) Declaration public static void LoadScenes(params SceneReference[] sceneReferences) Parameters Type Name Description UnityEngine.SceneReference[] sceneReferences LoadScenesAsync(params int[]) Declaration public static LoadSceneOperationHandle LoadScenesAsync(params int[] sceneBuildIndexes) Parameters Type Name Description int[] sceneBuildIndexes Returns Type Description LoadSceneOperationHandle LoadScenesAsync(params string[]) Declaration public static LoadSceneOperationHandle LoadScenesAsync(params string[] sceneNames) Parameters Type Name Description string[] sceneNames Returns Type Description LoadSceneOperationHandle LoadScenesAsync(params SceneReference[]) Declaration public static LoadSceneOperationHandle LoadScenesAsync(params SceneReference[] sceneReferences) Parameters Type Name Description UnityEngine.SceneReference[] sceneReferences Returns Type Description LoadSceneOperationHandle LoadScenesAsync(LoadMultiSceneMode, params int[]) Declaration public static LoadSceneOperationHandle LoadScenesAsync(LoadMultiSceneMode multiLoadSceneMode, params int[] sceneBuildIndexes) Parameters Type Name Description LoadMultiSceneMode multiLoadSceneMode int[] sceneBuildIndexes Returns Type Description LoadSceneOperationHandle LoadScenesAsync(LoadMultiSceneMode, params string[]) Declaration public static LoadSceneOperationHandle LoadScenesAsync(LoadMultiSceneMode multiLoadSceneMode, params string[] sceneNames) Parameters Type Name Description LoadMultiSceneMode multiLoadSceneMode string[] sceneNames Returns Type Description LoadSceneOperationHandle LoadScenesAsync(LoadMultiSceneMode, params SceneReference[]) Declaration public static LoadSceneOperationHandle LoadScenesAsync(LoadMultiSceneMode multiLoadSceneMode, params SceneReference[] sceneReferences) Parameters Type Name Description LoadMultiSceneMode multiLoadSceneMode UnityEngine.SceneReference[] sceneReferences Returns Type Description LoadSceneOperationHandle MergeScenes(Scene, Scene) Declaration public static void MergeScenes(Scene sourceScene, Scene destinationScene) Parameters Type Name Description UnityEngine.SceneManagement.Scene sourceScene UnityEngine.SceneManagement.Scene destinationScene MoveGameObjectToScene(GameObject, Scene) Declaration public static void MoveGameObjectToScene(GameObject go, Scene scene) Parameters Type Name Description UnityEngine.GameObject go UnityEngine.SceneManagement.Scene scene RemoveCallbackReceiver(ILoadSceneCallbackReceiver) Declaration public static void RemoveCallbackReceiver(ILoadSceneCallbackReceiver receiver) Parameters Type Name Description ILoadSceneCallbackReceiver receiver SetActiveScene(Scene) Declaration public static void SetActiveScene(Scene scene) Parameters Type Name Description UnityEngine.SceneManagement.Scene scene UnloadScene(int) Declaration public static void UnloadScene(int sceneBuildIndex) Parameters Type Name Description int sceneBuildIndex UnloadScene(string) Declaration public static void UnloadScene(string sceneName) Parameters Type Name Description string sceneName UnloadScene(SceneReference) Declaration public static void UnloadScene(SceneReference sceneReference) Parameters Type Name Description UnityEngine.SceneReference sceneReference UnloadSceneAsync(int) Declaration public static LoadSceneOperationHandle UnloadSceneAsync(int sceneBuildIndex) Parameters Type Name Description int sceneBuildIndex Returns Type Description LoadSceneOperationHandle UnloadSceneAsync(string) Declaration public static LoadSceneOperationHandle UnloadSceneAsync(string sceneName) Parameters Type Name Description string sceneName Returns Type Description LoadSceneOperationHandle UnloadSceneAsync(SceneReference) Declaration public static LoadSceneOperationHandle UnloadSceneAsync(SceneReference sceneReference) Parameters Type Name Description UnityEngine.SceneReference sceneReference Returns Type Description LoadSceneOperationHandle UnloadScenes(params int[]) Declaration public static void UnloadScenes(params int[] sceneBuildIndexes) Parameters Type Name Description int[] sceneBuildIndexes UnloadScenes(params string[]) Declaration public static void UnloadScenes(params string[] sceneNames) Parameters Type Name Description string[] sceneNames UnloadScenes(params SceneReference[]) Declaration public static void UnloadScenes(params SceneReference[] sceneReferences) Parameters Type Name Description UnityEngine.SceneReference[] sceneReferences UnloadScenesAsync(params int[]) Declaration public static LoadSceneOperationHandle UnloadScenesAsync(params int[] sceneBuildIndexes) Parameters Type Name Description int[] sceneBuildIndexes Returns Type Description LoadSceneOperationHandle UnloadScenesAsync(params string[]) Declaration public static LoadSceneOperationHandle UnloadScenesAsync(params string[] sceneNames) Parameters Type Name Description string[] sceneNames Returns Type Description LoadSceneOperationHandle UnloadScenesAsync(params SceneReference[]) Declaration public static LoadSceneOperationHandle UnloadScenesAsync(params SceneReference[] sceneReferences) Parameters Type Name Description UnityEngine.SceneReference[] sceneReferences Returns Type Description LoadSceneOperationHandle Events onActiveSceneChanged Declaration public static event UnityAction<Scene, Scene> onActiveSceneChanged Event Type Type Description UnityEngine.Events.UnityAction<,><UnityEngine.SceneManagement.Scene, UnityEngine.SceneManagement.Scene> onSceneLoaded Declaration public static event UnityAction<Scene, LoadSceneMode> onSceneLoaded Event Type Type Description UnityEngine.Events.UnityAction<,><UnityEngine.SceneManagement.Scene, UnityEngine.SceneManagement.LoadSceneMode> onSceneUnLoaded Declaration public static event UnityAction<Scene> onSceneUnLoaded Event Type Type Description UnityEngine.Events.UnityAction<><UnityEngine.SceneManagement.Scene>"
  },
  "api/UnityEngine.SceneSystem.WithLoadingScreenExtensions.html": {
    "href": "api/UnityEngine.SceneSystem.WithLoadingScreenExtensions.html",
    "title": "Class WithLoadingScreenExtensions | Scene System",
    "keywords": "Class WithLoadingScreenExtensions Inheritance System.Object WithLoadingScreenExtensions Namespace: UnityEngine.SceneSystem Assembly: Unity.SceneSystem.Runtime.dll Syntax public static class WithLoadingScreenExtensions : Object Methods WithLoadingScreen(LoadSceneOperationHandle, SceneLoader) Declaration public static LoadSceneOperationHandle WithLoadingScreen(this LoadSceneOperationHandle self, SceneLoader screen) Parameters Type Name Description LoadSceneOperationHandle self SceneLoader screen Returns Type Description LoadSceneOperationHandle"
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | Scene System",
    "keywords": "Changelog [1.0.0] - 2024-01-01 AnnulusGames' SceneSystem has been changed to the NK Studio method."
  },
  "license/License.html": {
    "href": "license/License.html",
    "title": "| Scene System",
    "keywords": "MIT License Copyright (c) 2024 NK Studio Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/Events.html": {
    "href": "manual/Events.html",
    "title": "Events | Scene System",
    "keywords": "Events As with a normal SceneManager, it is possible to acquire timings such as scene loading with events. Scenes.onSceneLoaded += (scene, loadSceneMode) => { Debug.Log(scene.name + \" loaded\"); }; Scenes.onSceneUnLoaded += scene => { Debug.Log(scene.name + \" unloaded\"); }; Scenes.onActiveSceneChanged += (current, next) => { Debug.Log($\"active scene changed from {current.name} to {next.name}\"); }; Also, by passing a class that implements ILoadSceneCallbackReceiver, it is possible to process these events collectively. using UnityEngine; using UnityEngine.SceneManagement; using UnityEngine.SceneSystem; public class Example : MonoBehaviour, ILoadSceneCallbackReceiver { void Start() { Scenes.AddCallbackReceiver(this); } void ILoadSceneCallbackReceiver.OnActiveSceneChanged(Scene current, Scene next) { Debug.Log($\"active scene changed from {current.name} to {next.name}\"); } void ILoadSceneCallbackReceiver.OnLoad(Scene scene, LoadSceneMode loadSceneMode) { Debug.Log(scene.name + \"loaded\"); } void ILoadSceneCallbackReceiver.OnUnload(Scene scene) { Debug.Log(scene.name + \"unloaded\"); } }"
  },
  "manual/GettingStarted.html": {
    "href": "manual/GettingStarted.html",
    "title": "Getting Started | Scene System",
    "keywords": "Getting Started The Scene System is a library that makes it more convenient to use Unity's SceneManager. Someone can use SceneManager enough even without using this library. However, this library helps to alleviate the inconvenience of using SceneManager and makes it more convenient to use. Well, let's get started!"
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Scene System | Scene System",
    "keywords": "Scene System Introduction Scene System is a library that provides functions related to scene management in Unity. This library includes an API for loading scenes and a function that enables scene settings on the editor. Features API for multi-functional scene management that extends SceneManager Add SceneReference that can set scene reference on Inspector LoadingScreen component for easy implementation of loading screens SceneContainer for efficient multi-scene management Supports coroutines and async/await Support UniRx/UniTask"
  },
  "manual/Installation.html": {
    "href": "manual/Installation.html",
    "title": "Installation | Scene System",
    "keywords": "Installation Git UPM Installing the Scene System package requires the following steps: Make sure Git is installed. Open Package Manager. Click the + button and click the Add package from git URL. Enter https://github.com/NK-Studio/SceneSystem.git#UPM and click the Add button. UnityPackage Download and install the latest version of the package from GitHub Releases."
  },
  "manual/LoadSceneOperationHandle.html": {
    "href": "manual/LoadSceneOperationHandle.html",
    "title": "LoadScene Operation Handle | Scene System",
    "keywords": "LoadScene Operation Handle All asynchronous methods in the Scene System have a structure called LoadScene Operation Handle as a return value. By using LoadScene Operation Handle, it is possible to wait for transitions, enable scenes, etc. Wait for the process to complete Use onCompleted to wait for the completion of processing in a callback. var handle = Scenes.LoadSceneAsync(\"SceneName\"); handle.onCompleted += () => { Debug.Log(\"completed\"); }; To wait in a coroutine, use the ToYieldInteraction method. var handle = Scenes.LoadSceneAsync(\"SceneName\"); yield return handle.ToYieldInteraction(); To wait with async/await, use the ToTask method. var handle = Scenes.LoadSceneAsync(\"SceneName\"); await handle.ToTask(); Get Progress It is also possible to get the progress from the 'LoadScene Operation Handle'. var handle = Scenes.LoadSceneAsync(\"SceneName\"); // get the progress as a float between 0 and 1 var progress = handle.Progress; // get if completed var isDone = handle.IsDone; Activate Scene By using the AllowSceneActivation() method, it is possible to adjust the timing of scene loading completion. Here is an example of using Allow Scene Activation inside a coroutine. var handle = Scenes.LoadSceneAsync(\"SceneName\"); // set allowSceneActivation to false handle.AllowSceneActivation(false); // wait until progress reaches 0.9 (loading is complete) yield return new WaitWhile(() => handle.Progress < 0.9f); // set allowSceneActivation to true handle.AllowSceneActivation(true); // wait until the scene is activated yield return handle.ToYieldInteraction(); Regarding the behavior of Progress and IsDone values when AllowSceneActivation is set to false, it conforms to Unity's AllowSceneActivation. https://docs.unity3d.com/2019.4/Documentation/ScriptReference/AsyncOperation-allowSceneActivation.html"
  },
  "manual/Sample.html": {
    "href": "manual/Sample.html",
    "title": "Sample | Scene System",
    "keywords": "Sample A loading screen implementation sample using SceneLoader is available and can be installed from Package Manager/Samples. Please refer to it when you actually create a loading screen. You can download the sample by clicking Import."
  },
  "manual/SceneContainer.html": {
    "href": "manual/SceneContainer.html",
    "title": "Scene Container | Scene System",
    "keywords": "Scene Container When adopting a project structure that uses multiple scenes in Unity, it is necessary to implement the transition of multiple scenes in some way. Scene System provides the SceneContainer class as a function for performing such complex scene transitions. It supports Push & Pop and operates by stacking on the stack. Create a container // create a new container SceneContainer container = SceneContainer.Create(); When using SceneContainer, first create a new container with SceneContainer.Create(). // pass the key associated with the scene to the first argument, // and the scene name and scene buildIndex to the second argument container.Register(\"Page1\", \"Sample1A\"); container.Register(\"Page1\", \"Sample1B\"); container.Register(\"Page2\", \"Sample2\"); Register a scene to be loaded/unloaded at runtime with the Register method. (When loaded, it is loaded in an additive Style.) // pass the scene name and scene buildIndex as arguments container.RegisterPermanent(\"Permanent1\"); container.RegisterPermanent(\"Permanent2\"); Register a scene that exists permanently at runtime with the RegisterPermanent method. // build the container var handle = container.Build(); // wait for completion yield return handle.ToYieldInteraction(); Finally, we call the Build method. Calling this method activates the container and at the same time loads the scenes registered with RegisterPermanent in an Additive Style. This process is asynchronous and can be awaited in the same way as a normal scene load. Scene transition using containers // Load all scenes related to the registered key var handle = container.Push(\"Page1\"); yield return handle.ToYieldInteraction(); // return to previous scene handle = container.Pop(); yield return handle.ToYieldInteraction(); To perform a scene transition with a SceneContainer, use the Push method. (Load the scene in an additive Style.) The history of scenes is stacked, and it is possible to return to the previous scene by calling the Pop() method. var handle = container.ClearStack(); By calling the ClearStack method, you can reset the history and unload any scenes you have loaded with push(). var handle = container.Release(); You can also call Release() to destroy the container and unload all scenes, including persistent scenes."
  },
  "manual/SceneLoader.html": {
    "href": "manual/SceneLoader.html",
    "title": "Scene Loader | Scene System",
    "keywords": "Scene Loader Scene Loader is a component used to load scenes. Additionally, thanks to its ability to load scenes, it can also be used to implement loading screens. Setting Click Add Component on the empty object to add a Scene Loader component. Refer to the scene you want to move to Scene Asset. If the added scene does not exist in the Build Setting, an error message is displayed. Load Style Load Styles include Single and Additive. Additive Style allows multiple scenes to be loaded simultaneously. Skip Mode Set the behavior when loading is completed. SkipMode Behavior Instant Complete Activates the next scene immediately after loading completes. Any Key Activates the next scene when any key is pressed after loading is complete. Manual After loading is complete, manually activate the next scene from Script. Other Settings Minimum Loading Time Sets the minimum amount of time used to navigate to a scene after loading it. Destroy On Completed If set to true, the Scene Loader object will be destroyed after loading is complete. Editor Auto Load Set whether to automatically load scenes registered in Additive in the editor. (Editor Only) Use Async (Additive Only) If set to true, loads the scene asynchronously. (false recommended) Tip 'Destroy On Completed' is useful when configuring an Additive Style or Load Scene. Events On Loading (Single) Called while loading. On Load Completed Called when the scene has finished loading. On Completed Called when the scene has finished loading and the scene has been activated."
  },
  "manual/SceneReference.html": {
    "href": "manual/SceneReference.html",
    "title": "Scene Reference | Scene System",
    "keywords": "Scene Reference The Scene System supports Scene Reference. The Scene System provides two ways to install a Scene Reference: Installation using the Scene System Wizard Installation using Git UPM Installation using the Scene System Wizard Open Tools > Scene System > Scene System Wizard. Using the Scene System Wizard, you can install the Scene Reference along with the Scene System. Warning The internal implementation uses Git UPM for installation, so Git is required. Installation using Git UPM https://github.com/NK-Studio/SceneReference.git#UPM Open Window > Package Manager > + > Add package from git URL... Enter the above address in the input box and click the Add button to complete the installation. Example Code using UnityEngine; using UnityEngine.SceneSystem; public class Example : MonoBehaviour { public SceneReference nextScene; private void Start() { // Load the scene. Scenes.LoadSceneAsync(nextScene); // Get the path of the scene. Debug.Log(nextScene.Path); } }"
  },
  "manual/Scenes.html": {
    "href": "manual/Scenes.html",
    "title": "Scenes | Scene System",
    "keywords": "Scenes Namespace using UnityEngine.SceneSystem; When using Scene System, add the following line at the beginning of the file. using UnityEngine; using UnityEngine.SceneManagement; using UnityEngine.SceneSystem; void Example() { // load the scene with BuildSettings Index Scenes.LoadSceneAsync(0); // load scene by scene name Scenes.LoadSceneAsync(\"SceneName\", LoadSceneMode.Additive); // synchronous loading is also possible Scenes.LoadScene(0); // unload the scene at Index of BuildSettings Scenes.UnloadSceneAsync(0); // unload scene by scene name Scenes.UnloadSceneAsync(\"SceneName\"); // synchronous unloading is also possible Scenes.UnloadScene(0); } It is also possible to load/unload multiple scenes simultaneously. // load multiple scenes simultaneously (LoadSceneMode is Addictive only) Scenes.LoadScenesAsync(\"Scene1\", \"Scene2\", \"Scene3\"); // unload multiple scenes simultaneously Scenes.UnloadScenesAsync(\"Scene1\", \"Scene2\"); For LoadScenesAsync only, you can set the behavior of loading multiple scenes by setting LoadMultiSceneMode. // load multiple scenes simultaneously Scenes.LoadScenesAsync(LoadMultiSceneMode.Parallel, \"Scene1\", \"Scene2\", \"Scene3\"); // load multiple scenes one by one Scenes.LoadScenesAsync(LoadMultiSceneMode.Sequential, \"Scene1\", \"Scene2\");"
  },
  "manual/SceneSystemAndUniRx.html": {
    "href": "manual/SceneSystemAndUniRx.html",
    "title": "SceneSystem + UniRx | Scene System",
    "keywords": "SceneSystem + UniRx By introducing UniRx, it becomes possible to observable events related to scene loading. To get scene loading/unloading events and active scene switching events as IObservable, write as follows. using UnityEngine.SceneSystem; using UniRx; void Example() { Scenes.OnSceneLoadedAsObservable().Subscribe(x => { var scene = x.scene; var loadSceneMode = x.loadSceneMode; Debug.Log(\"scene loaded\"); }); Scenes.OnSceneUnloadedAsObservable().Subscribe(scene => { Debug.Log(\"scene unloaded\"); }); Scenes.OnActiveSceneChangedAsObservable().Subscribe(x => { var current = x.current; var next = x.next; Debug.Log(\"active scene changed\"); }); } It is also possible to get SceneContainer events as IObservable. SceneContainer container; void Example() { container.OnBeforePushAsObservable().Subscribe(x => { Debug.Log(\"Current: \" + x.current + \" Next: \" + x.next); }); container.OnAfterPushAsObservable().Subscribe(x => { Debug.Log(\"Current: \" + x.current + \" Next: \" + x.next); }); container.OnBeforePopAsObservable().Subscribe(x => { Debug.Log(\"Current: \" + x.current + \" Next: \" + x.next); }); container.OnAfterPopAsObservable().Subscribe(x => { Debug.Log(\"Current: \" + x.current + \" Next: \" + x.next); }); }"
  },
  "manual/SceneSystemAndUniTask.html": {
    "href": "manual/SceneSystemAndUniTask.html",
    "title": "Scene System + UniTask | Scene System",
    "keywords": "Scene System + UniTask By introducing UniTask, it becomes possible to wait for LoadSceneOperationHandle with UniTask. Use ToUniTask to convert the LoadSceneOperationHandle to a UniTask. using UnityEngine.SceneSystem; using Cysharp.Threading.Tasks; async UniTaskVoid ExampleAsync() { await Scenes.LoadAsync(\"SceneName\").ToUniTask(); }"
  },
  "node_modules/jetbrains-mono-webfont/README.html": {
    "href": "node_modules/jetbrains-mono-webfont/README.html",
    "title": "jetbrains-mono-webfont | Scene System",
    "keywords": "jetbrains-mono-webfont A webfont package for the JetBrains Mono typeface. For more information about the typeface, see JetBrains Mono's website. NPM npm install --save jetbrains-mono-webfont License jetbrains-mono-webfont © Chawye Hsu. Released under the MIT License. The JetBrains Mono typeface is available under the SIL Open Font License 1.1 license. Blog · GitHub @chawyehsu · Twitter @chawyehsu"
  }
}