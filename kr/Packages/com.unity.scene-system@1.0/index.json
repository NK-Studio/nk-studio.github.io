{
  "api/index.html": {
    "href": "api/index.html",
    "title": "| Scene System",
    "keywords": "이 패키지의 Scripting API 기술 자료입니다."
  },
  "api/UnityEditor.SceneSystem.html": {
    "href": "api/UnityEditor.SceneSystem.html",
    "title": "Namespace UnityEditor.SceneSystem | Scene System",
    "keywords": "Namespace UnityEditor.SceneSystem Classes SceneLoaderInspector"
  },
  "api/UnityEditor.SceneSystem.SceneLoaderInspector.html": {
    "href": "api/UnityEditor.SceneSystem.SceneLoaderInspector.html",
    "title": "Class SceneLoaderInspector | Scene System",
    "keywords": "Class SceneLoaderInspector Inheritance System.Object SceneLoaderInspector Namespace: UnityEditor.SceneSystem Assembly: Unity.SceneSystem.Editor.dll Syntax public class SceneLoaderInspector : Editor Constructors SceneLoaderInspector() Declaration public SceneLoaderInspector() Methods CreateInspectorGUI() Declaration public override VisualElement CreateInspectorGUI() Returns Type Description UnityEngine.UIElements.VisualElement"
  },
  "api/UnityEngine.SceneSystem.html": {
    "href": "api/UnityEngine.SceneSystem.html",
    "title": "Namespace UnityEngine.SceneSystem | Scene System",
    "keywords": "Namespace UnityEngine.SceneSystem Classes LoadingActionSkipMode LoadMultiSceneMode LoadSceneOperationHandle LoadSceneOperationHandleExtensions SceneContainer SceneHandler SceneLoader Scenes WithLoadingScreenExtensions Interfaces ILoadSceneCallbackReceiver ISceneContainerCallbackReceiver ISceneHandler"
  },
  "api/UnityEngine.SceneSystem.ILoadSceneCallbackReceiver.html": {
    "href": "api/UnityEngine.SceneSystem.ILoadSceneCallbackReceiver.html",
    "title": "Interface ILoadSceneCallbackReceiver | Scene System",
    "keywords": "Interface ILoadSceneCallbackReceiver Namespace: UnityEngine.SceneSystem Assembly: Unity.SceneSystem.Runtime.dll Syntax public interface ILoadSceneCallbackReceiver Methods OnActiveSceneChanged(Scene, Scene) Declaration void OnActiveSceneChanged(Scene current, Scene next) Parameters Type Name Description UnityEngine.SceneManagement.Scene current UnityEngine.SceneManagement.Scene next OnLoad(Scene, LoadSceneMode) Declaration void OnLoad(Scene scene, LoadSceneMode loadSceneMode) Parameters Type Name Description UnityEngine.SceneManagement.Scene scene UnityEngine.SceneManagement.LoadSceneMode loadSceneMode OnUnload(Scene) Declaration void OnUnload(Scene scene) Parameters Type Name Description UnityEngine.SceneManagement.Scene scene"
  },
  "api/UnityEngine.SceneSystem.ISceneContainerCallbackReceiver.html": {
    "href": "api/UnityEngine.SceneSystem.ISceneContainerCallbackReceiver.html",
    "title": "Interface ISceneContainerCallbackReceiver | Scene System",
    "keywords": "Interface ISceneContainerCallbackReceiver Namespace: UnityEngine.SceneSystem Assembly: Unity.SceneSystem.Runtime.dll Syntax public interface ISceneContainerCallbackReceiver Methods OnAfterPop(string, string) Declaration void OnAfterPop(string enter, string exit) Parameters Type Name Description string enter string exit OnAfterPush(string, string) Declaration void OnAfterPush(string enter, string exit) Parameters Type Name Description string enter string exit OnBeforePop(string, string) Declaration void OnBeforePop(string enter, string exit) Parameters Type Name Description string enter string exit OnBeforePush(string, string) Declaration void OnBeforePush(string enter, string exit) Parameters Type Name Description string enter string exit"
  },
  "api/UnityEngine.SceneSystem.ISceneHandler.html": {
    "href": "api/UnityEngine.SceneSystem.ISceneHandler.html",
    "title": "Interface ISceneHandler | Scene System",
    "keywords": "Interface ISceneHandler Namespace: UnityEngine.SceneSystem Assembly: Unity.SceneSystem.Runtime.dll Syntax public interface ISceneHandler Methods GetLoadSceneOperation(string, LoadSceneMode) Declaration LoadSceneOperation GetLoadSceneOperation(string sceneName, LoadSceneMode loadSceneMode) Parameters Type Name Description string sceneName UnityEngine.SceneManagement.LoadSceneMode loadSceneMode Returns Type Description LoadSceneOperation GetUnloadSceneOperation(string) Declaration LoadSceneOperation GetUnloadSceneOperation(string sceneName) Parameters Type Name Description string sceneName Returns Type Description LoadSceneOperation Load(string, LoadSceneMode) Declaration void Load(string sceneName, LoadSceneMode loadSceneMode) Parameters Type Name Description string sceneName UnityEngine.SceneManagement.LoadSceneMode loadSceneMode LoadAsync(string, LoadSceneMode) Declaration LoadSceneOperationHandle LoadAsync(string sceneName, LoadSceneMode loadSceneMode) Parameters Type Name Description string sceneName UnityEngine.SceneManagement.LoadSceneMode loadSceneMode Returns Type Description LoadSceneOperationHandle Unload(string) Declaration void Unload(string sceneName) Parameters Type Name Description string sceneName UnloadAsync(string) Declaration LoadSceneOperationHandle UnloadAsync(string sceneName) Parameters Type Name Description string sceneName Returns Type Description LoadSceneOperationHandle"
  },
  "api/UnityEngine.SceneSystem.LoadingActionSkipMode.html": {
    "href": "api/UnityEngine.SceneSystem.LoadingActionSkipMode.html",
    "title": "Class LoadingActionSkipMode | Scene System",
    "keywords": "Class LoadingActionSkipMode Inheritance System.Object LoadingActionSkipMode Namespace: UnityEngine.SceneSystem Assembly: Unity.SceneSystem.Runtime.dll Syntax public sealed class LoadingActionSkipMode : Enum Fields AnyKey Declaration public const LoadingActionSkipMode AnyKey = 1 Field Value Type Description LoadingActionSkipMode InstantComplete Declaration public const LoadingActionSkipMode InstantComplete = 0 Field Value Type Description LoadingActionSkipMode Manual Declaration public const LoadingActionSkipMode Manual = 2 Field Value Type Description LoadingActionSkipMode value__ Declaration public int value__ Field Value Type Description int"
  },
  "api/UnityEngine.SceneSystem.LoadMultiSceneMode.html": {
    "href": "api/UnityEngine.SceneSystem.LoadMultiSceneMode.html",
    "title": "Class LoadMultiSceneMode | Scene System",
    "keywords": "Class LoadMultiSceneMode Inheritance System.Object LoadMultiSceneMode Namespace: UnityEngine.SceneSystem Assembly: Unity.SceneSystem.Runtime.dll Syntax public sealed class LoadMultiSceneMode : Enum Fields Parallel Declaration public const LoadMultiSceneMode Parallel = 0 Field Value Type Description LoadMultiSceneMode Sequential Declaration public const LoadMultiSceneMode Sequential = 1 Field Value Type Description LoadMultiSceneMode value__ Declaration public int value__ Field Value Type Description int"
  },
  "api/UnityEngine.SceneSystem.LoadSceneOperationHandle.html": {
    "href": "api/UnityEngine.SceneSystem.LoadSceneOperationHandle.html",
    "title": "Class LoadSceneOperationHandle | Scene System",
    "keywords": "Class LoadSceneOperationHandle Inheritance System.Object LoadSceneOperationHandle Namespace: UnityEngine.SceneSystem Assembly: Unity.SceneSystem.Runtime.dll Syntax public sealed class LoadSceneOperationHandle : ValueType Constructors LoadSceneOperationHandle(LoadSceneOperationBase) Declaration public LoadSceneOperationHandle(LoadSceneOperationBase operation) Parameters Type Name Description LoadSceneOperationBase operation Properties IsDone Declaration public bool IsDone { get; } Property Value Type Description bool IsValid Declaration public bool IsValid { get; } Property Value Type Description bool Progress Declaration public float Progress { get; } Property Value Type Description float Methods AllowSceneActivation(bool) Declaration public void AllowSceneActivation(bool allowSceneActivation) Parameters Type Name Description bool allowSceneActivation Events onCompleted Declaration public event Action onCompleted Event Type Type Description System.Action Extension Methods LoadSceneOperationHandleExtensions.ToTask(LoadSceneOperationHandle, CancellationToken) LoadSceneOperationHandleExtensions.ToYieldInteraction(LoadSceneOperationHandle) WithLoadingScreenExtensions.WithLoadingScreen(LoadSceneOperationHandle, SceneLoader)"
  },
  "api/UnityEngine.SceneSystem.LoadSceneOperationHandleExtensions.html": {
    "href": "api/UnityEngine.SceneSystem.LoadSceneOperationHandleExtensions.html",
    "title": "Class LoadSceneOperationHandleExtensions | Scene System",
    "keywords": "Class LoadSceneOperationHandleExtensions Inheritance System.Object LoadSceneOperationHandleExtensions Namespace: UnityEngine.SceneSystem Assembly: Unity.SceneSystem.Runtime.dll Syntax public static class LoadSceneOperationHandleExtensions : Object Methods ToTask(LoadSceneOperationHandle, CancellationToken) Declaration public static Task ToTask(this LoadSceneOperationHandle self, CancellationToken cancellationToken = null) Parameters Type Name Description LoadSceneOperationHandle self System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task ToYieldInteraction(LoadSceneOperationHandle) Declaration public static IEnumerator ToYieldInteraction(this LoadSceneOperationHandle self) Parameters Type Name Description LoadSceneOperationHandle self Returns Type Description System.Collections.IEnumerator"
  },
  "api/UnityEngine.SceneSystem.LoadSceneOperations.CompletedLoadSceneOperation.html": {
    "href": "api/UnityEngine.SceneSystem.LoadSceneOperations.CompletedLoadSceneOperation.html",
    "title": "Class CompletedLoadSceneOperation | Scene System",
    "keywords": "Class CompletedLoadSceneOperation Inheritance System.Object LoadSceneOperationBase CompletedLoadSceneOperation Namespace: UnityEngine.SceneSystem.LoadSceneOperations Assembly: Unity.SceneSystem.Runtime.dll Syntax public sealed class CompletedLoadSceneOperation : LoadSceneOperationBase Constructors CompletedLoadSceneOperation() Declaration public CompletedLoadSceneOperation() Properties HasExecuted Declaration public override bool HasExecuted { get; } Property Value Type Description bool Overrides LoadSceneOperationBase.HasExecuted IsDone Declaration public override bool IsDone { get; } Property Value Type Description bool Overrides LoadSceneOperationBase.IsDone Progress Declaration public override float Progress { get; } Property Value Type Description float Overrides LoadSceneOperationBase.Progress Methods AllowSceneActivation(bool) Declaration public override void AllowSceneActivation(bool allowSceneActivation) Parameters Type Name Description bool allowSceneActivation Overrides LoadSceneOperationBase.AllowSceneActivation(bool) Execute() Declaration public override LoadSceneOperationHandle Execute() Returns Type Description LoadSceneOperationHandle Overrides LoadSceneOperationBase.Execute() Events onCompleted Declaration public override event Action onCompleted Event Type Type Description System.Action Overrides LoadSceneOperationBase.onCompleted"
  },
  "api/UnityEngine.SceneSystem.LoadSceneOperations.ConcatLoadSceneOperation.html": {
    "href": "api/UnityEngine.SceneSystem.LoadSceneOperations.ConcatLoadSceneOperation.html",
    "title": "Class ConcatLoadSceneOperation | Scene System",
    "keywords": "Class ConcatLoadSceneOperation Inheritance System.Object LoadSceneOperationBase ConcatLoadSceneOperation Namespace: UnityEngine.SceneSystem.LoadSceneOperations Assembly: Unity.SceneSystem.Runtime.dll Syntax public sealed class ConcatLoadSceneOperation : LoadSceneOperationBase Constructors ConcatLoadSceneOperation(params LoadSceneOperationBase[]) Declaration public ConcatLoadSceneOperation(params LoadSceneOperationBase[] operations) Parameters Type Name Description LoadSceneOperationBase[] operations Properties HasExecuted Declaration public override bool HasExecuted { get; } Property Value Type Description bool Overrides LoadSceneOperationBase.HasExecuted IsDone Declaration public override bool IsDone { get; } Property Value Type Description bool Overrides LoadSceneOperationBase.IsDone Progress Declaration public override float Progress { get; } Property Value Type Description float Overrides LoadSceneOperationBase.Progress Methods AllowSceneActivation(bool) Declaration public override void AllowSceneActivation(bool allowSceneActivation) Parameters Type Name Description bool allowSceneActivation Overrides LoadSceneOperationBase.AllowSceneActivation(bool) Execute() Declaration public override LoadSceneOperationHandle Execute() Returns Type Description LoadSceneOperationHandle Overrides LoadSceneOperationBase.Execute() Events onCompleted Declaration public override event Action onCompleted Event Type Type Description System.Action Overrides LoadSceneOperationBase.onCompleted"
  },
  "api/UnityEngine.SceneSystem.LoadSceneOperations.html": {
    "href": "api/UnityEngine.SceneSystem.LoadSceneOperations.html",
    "title": "Namespace UnityEngine.SceneSystem.LoadSceneOperations | Scene System",
    "keywords": "Namespace UnityEngine.SceneSystem.LoadSceneOperations Classes CompletedLoadSceneOperation ConcatLoadSceneOperation LoadSceneOperation LoadSceneOperationBase MergeLoadSceneOperation"
  },
  "api/UnityEngine.SceneSystem.LoadSceneOperations.LoadSceneOperation.html": {
    "href": "api/UnityEngine.SceneSystem.LoadSceneOperations.LoadSceneOperation.html",
    "title": "Class LoadSceneOperation | Scene System",
    "keywords": "Class LoadSceneOperation Inheritance System.Object LoadSceneOperationBase LoadSceneOperation Namespace: UnityEngine.SceneSystem.LoadSceneOperations Assembly: Unity.SceneSystem.Runtime.dll Syntax public sealed class LoadSceneOperation : LoadSceneOperationBase Constructors LoadSceneOperation(Func<AsyncOperation>) Declaration public LoadSceneOperation(Func<AsyncOperation> asyncOperationFunc) Parameters Type Name Description System.Func<><AsyncOperation> asyncOperationFunc Properties HasExecuted Declaration public override bool HasExecuted { get; } Property Value Type Description bool Overrides LoadSceneOperationBase.HasExecuted IsDone Declaration public override bool IsDone { get; } Property Value Type Description bool Overrides LoadSceneOperationBase.IsDone Progress Declaration public override float Progress { get; } Property Value Type Description float Overrides LoadSceneOperationBase.Progress Methods AllowSceneActivation(bool) Declaration public override void AllowSceneActivation(bool allowSceneActivation) Parameters Type Name Description bool allowSceneActivation Overrides LoadSceneOperationBase.AllowSceneActivation(bool) Execute() Declaration public override LoadSceneOperationHandle Execute() Returns Type Description LoadSceneOperationHandle Overrides LoadSceneOperationBase.Execute() Events onCompleted Declaration public override event Action onCompleted Event Type Type Description System.Action Overrides LoadSceneOperationBase.onCompleted"
  },
  "api/UnityEngine.SceneSystem.LoadSceneOperations.LoadSceneOperationBase.html": {
    "href": "api/UnityEngine.SceneSystem.LoadSceneOperations.LoadSceneOperationBase.html",
    "title": "Class LoadSceneOperationBase | Scene System",
    "keywords": "Class LoadSceneOperationBase Inheritance System.Object LoadSceneOperationBase CompletedLoadSceneOperation ConcatLoadSceneOperation LoadSceneOperation MergeLoadSceneOperation Namespace: UnityEngine.SceneSystem.LoadSceneOperations Assembly: Unity.SceneSystem.Runtime.dll Syntax public abstract class LoadSceneOperationBase : Object Constructors LoadSceneOperationBase() Declaration protected LoadSceneOperationBase() Properties HasExecuted Declaration public abstract bool HasExecuted { get; } Property Value Type Description bool IsDone Declaration public abstract bool IsDone { get; } Property Value Type Description bool Progress Declaration public abstract float Progress { get; } Property Value Type Description float Methods AllowSceneActivation(bool) Declaration public abstract void AllowSceneActivation(bool allowSceneActivation) Parameters Type Name Description bool allowSceneActivation Execute() Declaration public abstract LoadSceneOperationHandle Execute() Returns Type Description LoadSceneOperationHandle Events onCompleted Declaration public abstract event Action onCompleted Event Type Type Description System.Action"
  },
  "api/UnityEngine.SceneSystem.LoadSceneOperations.MergeLoadSceneOperation.html": {
    "href": "api/UnityEngine.SceneSystem.LoadSceneOperations.MergeLoadSceneOperation.html",
    "title": "Class MergeLoadSceneOperation | Scene System",
    "keywords": "Class MergeLoadSceneOperation Inheritance System.Object LoadSceneOperationBase MergeLoadSceneOperation Namespace: UnityEngine.SceneSystem.LoadSceneOperations Assembly: Unity.SceneSystem.Runtime.dll Syntax public sealed class MergeLoadSceneOperation : LoadSceneOperationBase Constructors MergeLoadSceneOperation(params LoadSceneOperationBase[]) Declaration public MergeLoadSceneOperation(params LoadSceneOperationBase[] operations) Parameters Type Name Description LoadSceneOperationBase[] operations Properties HasExecuted Declaration public override bool HasExecuted { get; } Property Value Type Description bool Overrides LoadSceneOperationBase.HasExecuted IsDone Declaration public override bool IsDone { get; } Property Value Type Description bool Overrides LoadSceneOperationBase.IsDone Progress Declaration public override float Progress { get; } Property Value Type Description float Overrides LoadSceneOperationBase.Progress Methods AllowSceneActivation(bool) Declaration public override void AllowSceneActivation(bool allowSceneActivation) Parameters Type Name Description bool allowSceneActivation Overrides LoadSceneOperationBase.AllowSceneActivation(bool) Execute() Declaration public override LoadSceneOperationHandle Execute() Returns Type Description LoadSceneOperationHandle Overrides LoadSceneOperationBase.Execute() Events onCompleted Declaration public override event Action onCompleted Event Type Type Description System.Action Overrides LoadSceneOperationBase.onCompleted"
  },
  "api/UnityEngine.SceneSystem.SceneContainer.html": {
    "href": "api/UnityEngine.SceneSystem.SceneContainer.html",
    "title": "Class SceneContainer | Scene System",
    "keywords": "Class SceneContainer Inheritance System.Object SceneContainer Namespace: UnityEngine.SceneSystem Assembly: Unity.SceneSystem.Runtime.dll Syntax public sealed class SceneContainer : Object Properties IsLoading Declaration public bool IsLoading { get; } Property Value Type Description bool StackCount Declaration public int StackCount { get; } Property Value Type Description int Methods AddCallbackReceiver(ISceneContainerCallbackReceiver) Declaration public void AddCallbackReceiver(ISceneContainerCallbackReceiver receiver) Parameters Type Name Description ISceneContainerCallbackReceiver receiver Build() Declaration public LoadSceneOperationHandle Build() Returns Type Description LoadSceneOperationHandle ClearStack() Declaration public LoadSceneOperationHandle ClearStack() Returns Type Description LoadSceneOperationHandle Create() Declaration public static SceneContainer Create() Returns Type Description SceneContainer Pop() Declaration public LoadSceneOperationHandle Pop() Returns Type Description LoadSceneOperationHandle Push(string) Declaration public LoadSceneOperationHandle Push(string key) Parameters Type Name Description string key Returns Type Description LoadSceneOperationHandle Register(string, int, int) Declaration public void Register(string key, int sceneBuildIndex, int order = 0) Parameters Type Name Description string key int sceneBuildIndex int order Register(string, string, int) Declaration public void Register(string key, string sceneName, int order = 0) Parameters Type Name Description string key string sceneName int order RegisterPermanent(int, int) Declaration public void RegisterPermanent(int sceneBuildIndex, int order = 0) Parameters Type Name Description int sceneBuildIndex int order RegisterPermanent(string, int) Declaration public void RegisterPermanent(string sceneName, int order = 0) Parameters Type Name Description string sceneName int order Release() Declaration public LoadSceneOperationHandle Release() Returns Type Description LoadSceneOperationHandle RemoveCallbackReceiver(ISceneContainerCallbackReceiver) Declaration public void RemoveCallbackReceiver(ISceneContainerCallbackReceiver receiver) Parameters Type Name Description ISceneContainerCallbackReceiver receiver Events OnAfterPop Declaration public event Action<string, string> OnAfterPop Event Type Type Description System.Action<,><string, string> OnAfterPush Declaration public event Action<string, string> OnAfterPush Event Type Type Description System.Action<,><string, string> OnBeforePop Declaration public event Action<string, string> OnBeforePop Event Type Type Description System.Action<,><string, string> OnBeforePush Declaration public event Action<string, string> OnBeforePush Event Type Type Description System.Action<,><string, string>"
  },
  "api/UnityEngine.SceneSystem.SceneHandler.html": {
    "href": "api/UnityEngine.SceneSystem.SceneHandler.html",
    "title": "Class SceneHandler | Scene System",
    "keywords": "Class SceneHandler Inheritance System.Object SceneHandler Implements ISceneHandler Namespace: UnityEngine.SceneSystem Assembly: Unity.SceneSystem.Runtime.dll Syntax public sealed class SceneHandler : Object, ISceneHandler Constructors SceneHandler() Declaration public SceneHandler() Methods GetLoadSceneOperation(string, LoadSceneMode) Declaration public LoadSceneOperation GetLoadSceneOperation(string sceneName, LoadSceneMode loadSceneMode) Parameters Type Name Description string sceneName UnityEngine.SceneManagement.LoadSceneMode loadSceneMode Returns Type Description LoadSceneOperation GetUnloadSceneOperation(string) Declaration public LoadSceneOperation GetUnloadSceneOperation(string sceneName) Parameters Type Name Description string sceneName Returns Type Description LoadSceneOperation Load(string, LoadSceneMode) Declaration public void Load(string sceneName, LoadSceneMode loadSceneMode) Parameters Type Name Description string sceneName UnityEngine.SceneManagement.LoadSceneMode loadSceneMode LoadAsync(string, LoadSceneMode) Declaration public LoadSceneOperationHandle LoadAsync(string sceneName, LoadSceneMode loadSceneMode) Parameters Type Name Description string sceneName UnityEngine.SceneManagement.LoadSceneMode loadSceneMode Returns Type Description LoadSceneOperationHandle Unload(string) Declaration public void Unload(string sceneName) Parameters Type Name Description string sceneName UnloadAsync(string) Declaration public LoadSceneOperationHandle UnloadAsync(string sceneName) Parameters Type Name Description string sceneName Returns Type Description LoadSceneOperationHandle Implements ISceneHandler"
  },
  "api/UnityEngine.SceneSystem.SceneLoader.html": {
    "href": "api/UnityEngine.SceneSystem.SceneLoader.html",
    "title": "Class SceneLoader | Scene System",
    "keywords": "Class SceneLoader Inheritance System.Object SceneLoader Namespace: UnityEngine.SceneSystem Assembly: Unity.SceneSystem.Runtime.dll Syntax public class SceneLoader : MonoBehaviour Constructors SceneLoader() Declaration public SceneLoader() Fields DestroyOnCompleted Declaration public bool DestroyOnCompleted Field Value Type Description bool LoadStyle Declaration public LoadSceneMode LoadStyle Field Value Type Description UnityEngine.SceneManagement.LoadSceneMode MinimumLoadingTime Declaration public float MinimumLoadingTime Field Value Type Description float onCompleted Declaration public UnityEvent onCompleted Field Value Type Description UnityEngine.Events.UnityEvent onLoadCompleted Declaration public UnityEvent onLoadCompleted Field Value Type Description UnityEngine.Events.UnityEvent onLoading Declaration public UnityEvent<float> onLoading Field Value Type Description UnityEngine.Events.UnityEvent<><float> SkipMode Declaration public LoadingActionSkipMode SkipMode Field Value Type Description LoadingActionSkipMode Methods AllowCompletion() Declaration public void AllowCompletion() GetLoadScene() Declaration public SceneReference GetLoadScene() Returns Type Description UnityEngine.SceneReference GetLoadScenes() Declaration public SceneReference[] GetLoadScenes() Returns Type Description UnityEngine.SceneReference[]"
  },
  "api/UnityEngine.SceneSystem.Scenes.html": {
    "href": "api/UnityEngine.SceneSystem.Scenes.html",
    "title": "Class Scenes | Scene System",
    "keywords": "Class Scenes Inheritance System.Object Scenes Namespace: UnityEngine.SceneSystem Assembly: Unity.SceneSystem.Runtime.dll Syntax public static class Scenes : Object Properties Count Declaration public static int Count { get; } Property Value Type Description int CountInBuildSettings Declaration public static int CountInBuildSettings { get; } Property Value Type Description int Loader Declaration public static ISceneHandler Loader { get; set; } Property Value Type Description ISceneHandler Methods AddCallbackReceiver(ILoadSceneCallbackReceiver) Declaration public static void AddCallbackReceiver(ILoadSceneCallbackReceiver receiver) Parameters Type Name Description ILoadSceneCallbackReceiver receiver CreateScene(string, CreateSceneParameters) Declaration public static void CreateScene(string sceneName, CreateSceneParameters parameters) Parameters Type Name Description string sceneName UnityEngine.SceneManagement.CreateSceneParameters parameters CreateScene(string) Declaration public static void CreateScene(string sceneName) Parameters Type Name Description string sceneName GetActiveScene() Declaration public static Scene GetActiveScene() Returns Type Description UnityEngine.SceneManagement.Scene GetSceneAt(int) Declaration public static Scene GetSceneAt(int index) Parameters Type Name Description int index Returns Type Description UnityEngine.SceneManagement.Scene GetSceneByBuildIndex(int) Declaration public static Scene GetSceneByBuildIndex(int buildIndex) Parameters Type Name Description int buildIndex Returns Type Description UnityEngine.SceneManagement.Scene GetSceneByName(string) Declaration public static Scene GetSceneByName(string sceneName) Parameters Type Name Description string sceneName Returns Type Description UnityEngine.SceneManagement.Scene GetSceneByPath(string) Declaration public static Scene GetSceneByPath(string scenePath) Parameters Type Name Description string scenePath Returns Type Description UnityEngine.SceneManagement.Scene LoadScene(int, LoadSceneMode) Declaration public static void LoadScene(int sceneBuildIndex, LoadSceneMode loadSceneMode = 0) Parameters Type Name Description int sceneBuildIndex UnityEngine.SceneManagement.LoadSceneMode loadSceneMode LoadScene(string, LoadSceneMode) Declaration public static void LoadScene(string sceneName, LoadSceneMode loadSceneMode = 0) Parameters Type Name Description string sceneName UnityEngine.SceneManagement.LoadSceneMode loadSceneMode LoadScene(SceneReference, LoadSceneMode) Declaration public static void LoadScene(SceneReference sceneReference, LoadSceneMode loadSceneMode = 0) Parameters Type Name Description UnityEngine.SceneReference sceneReference UnityEngine.SceneManagement.LoadSceneMode loadSceneMode LoadSceneAsync(int, LoadSceneMode) Declaration public static LoadSceneOperationHandle LoadSceneAsync(int sceneBuildIndex, LoadSceneMode loadSceneMode = 0) Parameters Type Name Description int sceneBuildIndex UnityEngine.SceneManagement.LoadSceneMode loadSceneMode Returns Type Description LoadSceneOperationHandle LoadSceneAsync(string, LoadSceneMode) Declaration public static LoadSceneOperationHandle LoadSceneAsync(string sceneName, LoadSceneMode loadSceneMode = 0) Parameters Type Name Description string sceneName UnityEngine.SceneManagement.LoadSceneMode loadSceneMode Returns Type Description LoadSceneOperationHandle LoadSceneAsync(SceneReference, LoadSceneMode) Declaration public static LoadSceneOperationHandle LoadSceneAsync(SceneReference sceneReference, LoadSceneMode loadSceneMode = 0) Parameters Type Name Description UnityEngine.SceneReference sceneReference UnityEngine.SceneManagement.LoadSceneMode loadSceneMode Returns Type Description LoadSceneOperationHandle LoadScenes(params int[]) Declaration public static void LoadScenes(params int[] sceneBuildIndexes) Parameters Type Name Description int[] sceneBuildIndexes LoadScenes(params string[]) Declaration public static void LoadScenes(params string[] sceneNames) Parameters Type Name Description string[] sceneNames LoadScenes(params SceneReference[]) Declaration public static void LoadScenes(params SceneReference[] sceneReferences) Parameters Type Name Description UnityEngine.SceneReference[] sceneReferences LoadScenesAsync(params int[]) Declaration public static LoadSceneOperationHandle LoadScenesAsync(params int[] sceneBuildIndexes) Parameters Type Name Description int[] sceneBuildIndexes Returns Type Description LoadSceneOperationHandle LoadScenesAsync(params string[]) Declaration public static LoadSceneOperationHandle LoadScenesAsync(params string[] sceneNames) Parameters Type Name Description string[] sceneNames Returns Type Description LoadSceneOperationHandle LoadScenesAsync(params SceneReference[]) Declaration public static LoadSceneOperationHandle LoadScenesAsync(params SceneReference[] sceneReferences) Parameters Type Name Description UnityEngine.SceneReference[] sceneReferences Returns Type Description LoadSceneOperationHandle LoadScenesAsync(LoadMultiSceneMode, params int[]) Declaration public static LoadSceneOperationHandle LoadScenesAsync(LoadMultiSceneMode multiLoadSceneMode, params int[] sceneBuildIndexes) Parameters Type Name Description LoadMultiSceneMode multiLoadSceneMode int[] sceneBuildIndexes Returns Type Description LoadSceneOperationHandle LoadScenesAsync(LoadMultiSceneMode, params string[]) Declaration public static LoadSceneOperationHandle LoadScenesAsync(LoadMultiSceneMode multiLoadSceneMode, params string[] sceneNames) Parameters Type Name Description LoadMultiSceneMode multiLoadSceneMode string[] sceneNames Returns Type Description LoadSceneOperationHandle LoadScenesAsync(LoadMultiSceneMode, params SceneReference[]) Declaration public static LoadSceneOperationHandle LoadScenesAsync(LoadMultiSceneMode multiLoadSceneMode, params SceneReference[] sceneReferences) Parameters Type Name Description LoadMultiSceneMode multiLoadSceneMode UnityEngine.SceneReference[] sceneReferences Returns Type Description LoadSceneOperationHandle MergeScenes(Scene, Scene) Declaration public static void MergeScenes(Scene sourceScene, Scene destinationScene) Parameters Type Name Description UnityEngine.SceneManagement.Scene sourceScene UnityEngine.SceneManagement.Scene destinationScene MoveGameObjectToScene(GameObject, Scene) Declaration public static void MoveGameObjectToScene(GameObject go, Scene scene) Parameters Type Name Description UnityEngine.GameObject go UnityEngine.SceneManagement.Scene scene RemoveCallbackReceiver(ILoadSceneCallbackReceiver) Declaration public static void RemoveCallbackReceiver(ILoadSceneCallbackReceiver receiver) Parameters Type Name Description ILoadSceneCallbackReceiver receiver SetActiveScene(Scene) Declaration public static void SetActiveScene(Scene scene) Parameters Type Name Description UnityEngine.SceneManagement.Scene scene UnloadScene(int) Declaration public static void UnloadScene(int sceneBuildIndex) Parameters Type Name Description int sceneBuildIndex UnloadScene(string) Declaration public static void UnloadScene(string sceneName) Parameters Type Name Description string sceneName UnloadScene(SceneReference) Declaration public static void UnloadScene(SceneReference sceneReference) Parameters Type Name Description UnityEngine.SceneReference sceneReference UnloadSceneAsync(int) Declaration public static LoadSceneOperationHandle UnloadSceneAsync(int sceneBuildIndex) Parameters Type Name Description int sceneBuildIndex Returns Type Description LoadSceneOperationHandle UnloadSceneAsync(string) Declaration public static LoadSceneOperationHandle UnloadSceneAsync(string sceneName) Parameters Type Name Description string sceneName Returns Type Description LoadSceneOperationHandle UnloadSceneAsync(SceneReference) Declaration public static LoadSceneOperationHandle UnloadSceneAsync(SceneReference sceneReference) Parameters Type Name Description UnityEngine.SceneReference sceneReference Returns Type Description LoadSceneOperationHandle UnloadScenes(params int[]) Declaration public static void UnloadScenes(params int[] sceneBuildIndexes) Parameters Type Name Description int[] sceneBuildIndexes UnloadScenes(params string[]) Declaration public static void UnloadScenes(params string[] sceneNames) Parameters Type Name Description string[] sceneNames UnloadScenes(params SceneReference[]) Declaration public static void UnloadScenes(params SceneReference[] sceneReferences) Parameters Type Name Description UnityEngine.SceneReference[] sceneReferences UnloadScenesAsync(params int[]) Declaration public static LoadSceneOperationHandle UnloadScenesAsync(params int[] sceneBuildIndexes) Parameters Type Name Description int[] sceneBuildIndexes Returns Type Description LoadSceneOperationHandle UnloadScenesAsync(params string[]) Declaration public static LoadSceneOperationHandle UnloadScenesAsync(params string[] sceneNames) Parameters Type Name Description string[] sceneNames Returns Type Description LoadSceneOperationHandle UnloadScenesAsync(params SceneReference[]) Declaration public static LoadSceneOperationHandle UnloadScenesAsync(params SceneReference[] sceneReferences) Parameters Type Name Description UnityEngine.SceneReference[] sceneReferences Returns Type Description LoadSceneOperationHandle Events onActiveSceneChanged Declaration public static event UnityAction<Scene, Scene> onActiveSceneChanged Event Type Type Description UnityEngine.Events.UnityAction<,><UnityEngine.SceneManagement.Scene, UnityEngine.SceneManagement.Scene> onSceneLoaded Declaration public static event UnityAction<Scene, LoadSceneMode> onSceneLoaded Event Type Type Description UnityEngine.Events.UnityAction<,><UnityEngine.SceneManagement.Scene, UnityEngine.SceneManagement.LoadSceneMode> onSceneUnLoaded Declaration public static event UnityAction<Scene> onSceneUnLoaded Event Type Type Description UnityEngine.Events.UnityAction<><UnityEngine.SceneManagement.Scene>"
  },
  "api/UnityEngine.SceneSystem.WithLoadingScreenExtensions.html": {
    "href": "api/UnityEngine.SceneSystem.WithLoadingScreenExtensions.html",
    "title": "Class WithLoadingScreenExtensions | Scene System",
    "keywords": "Class WithLoadingScreenExtensions Inheritance System.Object WithLoadingScreenExtensions Namespace: UnityEngine.SceneSystem Assembly: Unity.SceneSystem.Runtime.dll Syntax public static class WithLoadingScreenExtensions : Object Methods WithLoadingScreen(LoadSceneOperationHandle, SceneLoader) Declaration public static LoadSceneOperationHandle WithLoadingScreen(this LoadSceneOperationHandle self, SceneLoader screen) Parameters Type Name Description LoadSceneOperationHandle self SceneLoader screen Returns Type Description LoadSceneOperationHandle"
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "변경 로그 | Scene System",
    "keywords": "변경 로그 [1.0.0] - 2024-01-01 AnnulusGames의 SceneSystem이 NK Studio 방식으로 변경되었습니다."
  },
  "license/License.html": {
    "href": "license/License.html",
    "title": "| Scene System",
    "keywords": "MIT License Copyright (c) 2024 NK Studio Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/Events.html": {
    "href": "manual/Events.html",
    "title": "Events | Scene System",
    "keywords": "Events 일반 SceneManager와 마찬가지로 이벤트로 씬 로딩 등의 타이밍을 획득하는 것이 가능합니다. Scenes.onSceneLoaded += (scene, loadSceneMode) => { Debug.Log(scene.name + \" loaded\"); }; Scenes.onSceneUnLoaded += scene => { Debug.Log(scene.name + \" unloaded\"); }; Scenes.onActiveSceneChanged += (current, next) => { Debug.Log($\"active scene changed from {current.name} to {next.name}\"); }; 또한 ILoadSceneCallbackReceiver를 구현하는 클래스를 전달하면 이러한 이벤트를 일괄적으로 처리할 수 있습니다. using UnityEngine; using UnityEngine.SceneManagement; using UnityEngine.SceneSystem; public class Example : MonoBehaviour, ILoadSceneCallbackReceiver { void Start() { Scenes.AddCallbackReceiver(this); } void ILoadSceneCallbackReceiver.OnActiveSceneChanged(Scene current, Scene next) { Debug.Log($\"active scene changed from {current.name} to {next.name}\"); } void ILoadSceneCallbackReceiver.OnLoad(Scene scene, LoadSceneMode loadSceneMode) { Debug.Log(scene.name + \"loaded\"); } void ILoadSceneCallbackReceiver.OnUnload(Scene scene) { Debug.Log(scene.name + \"unloaded\"); } }"
  },
  "manual/GettingStarted.html": {
    "href": "manual/GettingStarted.html",
    "title": "시작하기 | Scene System",
    "keywords": "시작하기 Scene System은 Unity의 SceneManager를 보다 편리하게 사용할 수 있도록 해주는 라이브러리입니다. 이 라이브러리를 사용하지 않아도 누군가는 SceneManager를 충분히 사용할 수 있습니다. 하지만 이 라이브러리를 사용하면 SceneManager 사용에 따른 불편함을 해소하고 보다 편리하게 사용할 수 있습니다. 자, 시작해 봅시다!"
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "Scene System | Scene System",
    "keywords": "Scene System 소개 Scene System은 Unity에서의 씬 관리에 관련된 함수를 제공하는 라이브러리입니다. 이 라이브러리에는 씬을 불러오는 API와 에디터에서 씬 설정을 가능하게 하는 기능이 포함되어 있습니다. 특징 Scene Manager를 확장하는 다기능 씬 관리를 위한 API 인스펙터에서 씬 에셋을 참조할 수 있는 SceneReference 추가 로딩 화면을 쉽게 구현할 수 있는 Scene Loader 컴포넌트 제공 효율적인 다중 씬 관리를 위한 Scene Container 제공 코루틴과 async/await 지원 UniRx/UniTask 지원"
  },
  "manual/Installation.html": {
    "href": "manual/Installation.html",
    "title": "설치하기 | Scene System",
    "keywords": "설치하기 Git UPM Scene System 패키지를 설치하려면 다음 단계가 필요합니다.: Git이 설치되어 있는지 확인하세요. 패키지 관리자를 엽니다. +버튼을 클릭하고 git에서 패키지 추가 URL을 클릭합니다. https://github.com/NK-Studio/SceneSystem.git#UPM 을 입력하고 추가 버튼을 클릭하세요. UnityPackage GitHub 릴리스에서 최신 버전의 패키지를 다운로드하여 설치하세요."
  },
  "manual/LoadSceneOperationHandle.html": {
    "href": "manual/LoadSceneOperationHandle.html",
    "title": "LoadScene Operation Handle | Scene System",
    "keywords": "LoadScene Operation Handle Scene System의 모든 비동기 메서드에는 반환 값으로 LoadScene Operation Handle이라는 구조가 있습니다. LoadScene Operation Handle을 사용하면 전환 대기, 씬 활성화 등이 가능합니다. 프로세스가 완료될 때까지 기다리기 콜백 처리가 완료될 때까지 기다리려면 onCompleted를 사용하세요. var handle = Scenes.LoadSceneAsync(\"SceneName\"); handle.onCompleted += () => { Debug.Log(\"completed\"); }; 코루틴에서 기다리려면 ToYieldInteraction 메서드를 사용하세요. var handle = Scenes.LoadSceneAsync(\"SceneName\"); yield return handle.ToYieldInteraction(); async/await로 기다리려면 ToTask 메서드를 사용하세요. var handle = Scenes.LoadSceneAsync(\"SceneName\"); await handle.ToTask(); 진행도 가져오기 'LoadScene Operation Handle' 에서 진행 상황을 가져오는 것도 가능합니다. var handle = Scenes.LoadSceneAsync(\"SceneName\"); // 진행 상황을 0과 1 사이의 부동 소수점으로 가져옵니다. var progress = handle.Progress; // 완료되면 받기 var isDone = handle.IsDone; 씬 활성화 AllowSceneActivation() 메서드를 사용하면 씬 로딩 완료 시점을 조정할 수 있습니다. 다음은 코루틴 내에서 Allow Scene Activation을 사용하는 예입니다. var handle = Scenes.LoadSceneAsync(\"SceneName\"); // AllowSceneActivation을 false로 설정 handle.AllowSceneActivation(false); // 진행률이 0.9에 도달할 때까지 기다립니다(로딩이 완료됨). yield return new WaitWhile(() => handle.Progress < 0.9f); // AllowSceneActivation을 true로 설정 handle.AllowSceneActivation(true); // 장면이 활성화될 때까지 기다리세요 yield return handle.ToYieldInteraction(); AllowSceneActivation이 false로 설정된 경우 Progress 및 IsDone 값의 동작은 Unity의 AllowSceneActivation을 따릅니다. https://docs.unity3d.com/2019.4/Documentation/ScriptReference/AsyncOperation-allowSceneActivation.html"
  },
  "manual/Sample.html": {
    "href": "manual/Sample.html",
    "title": "Sample | Scene System",
    "keywords": "Sample SceneLoader 를 사용한 로딩 화면 구현 샘플이 제공되며 Package Manager/Sample에서 설치할 수 있습니다. 실제 로딩화면 제작시 참고하시기 바랍니다. Import를 클릭하면 샘플을 다운로드할 수 있습니다."
  },
  "manual/SceneContainer.html": {
    "href": "manual/SceneContainer.html",
    "title": "Scene Container | Scene System",
    "keywords": "Scene Container Unity에서 여러 씬을 사용하는 프로젝트 구조를 채택하는 경우 어떤 방식으로든 여러 씬의 전환을 구현해야 합니다. Scene System은 이러한 복잡한 씬 전환을 수행하기 위한 함수로 SceneContainer 클래스를 제공합니다. Push & Pop을 지원하며 스택에 쌓아서 동작합니다. 컨테이너 생성 // 컨테이너를 생성합니다. SceneContainer container = SceneContainer.Create(); SceneContainer를 사용하는 경우 먼저 SceneContainer.Create()를 사용하여 새 컨테이너를 만듭니다. // 씬과 관련된 키를 첫 번째 인수에 전달하고 씬 이름 또는 씬 buildIndex를 두 번째 인수에 전달합니다. container.Register(\"Page1\", \"Sample1A\"); container.Register(\"Page1\", \"Sample1B\"); container.Register(\"Page2\", \"Sample2\"); Register 메소드를 사용하여 런타임 시 로드/언로드할 씬을 등록합니다. (로드 될때 Additive 방식으로 로드됩니다.) // 씬 이름 또는 씬 buildIndex를 인수로 전달합니다. container.RegisterPermanent(\"Permanent1\"); container.RegisterPermanent(\"Permanent2\"); RegisterPermanent 메서드를 사용하여 런타임 시 영구적으로 존재하는 장면을 등록합니다. // 컨테이너를 빌드 var handle = container.Build(); // 완료를 기다립니다. yield return handle.ToYieldInteraction(); 마지막으로 Build 메서드를 호출합니다. 이 메서드를 호출하면 컨테이너가 활성화되는 동시에 RegisterPermanent에 등록된 씬이 Additive 방식으로 로드됩니다. 이 프로세스는 기본적으로 비동기식이며 일반적인 씬 로드와 동일한 동기 방식으로 기다릴 수 있습니다. 컨테이너를 사용한 씬 전환 // 등록된 키와 관련된 모든 씬을 로드합니다. var handle = container.Push(\"Page1\"); yield return handle.ToYieldInteraction(); // 이전 씬으로 돌아가기 handle = container.Pop(); yield return handle.ToYieldInteraction(); Scene Container를 사용하여 씬 전환을 수행하려면 Push 메서드를 사용하세요. (Additive 방식으로 씬을 로드합니다.) 씬이 히스토리에 누적되며, Pop() 메소드를 호출하면 이전 씬으로 돌아갈 수 있습니다. var handle = container.ClearStack(); ClearStack 메서드를 호출하면 히스토리를 리셋하고 Push() 로 로드한 모든 씬을 언로드할 수 있습니다. var handle = container.Release(); 또한 Release()를 호출하여 컨테이너를 삭제하고, RegisterPermanent(영구 씬)으로 등록한 씬을 포함한 모든 씬을 언로드할 수도 있습니다."
  },
  "manual/SceneLoader.html": {
    "href": "manual/SceneLoader.html",
    "title": "Scene Loader | Scene System",
    "keywords": "Scene Loader Scene Loader는 씬을 로드하는 데 사용되는 컴포넌트입니다. 또한, 씬을 로드하는 특성 덕분에 로딩 화면을 구현할 때도 활용할 수 있습니다. 설정 빈 게임 오브젝트에서 'Add Component' 를 클릭하여 Scene Loader 를 추가합니다. 이동하려는 씬에 대하여 씬 에셋을 참조하세요. 추가한 씬이 'Build Settings' 에 없으면 오류 메시지가 표시됩니다. Load Style Load Style에는 Single 및 Additive를 제공합니다. 'Additive' 스타일을 사용하면 여러 씬을 동시에 로드할 수 있습니다. Skip Mode 로딩이 완료되었을 때의 동작을 설정합니다. SkipMode Behavior Instant Complete 로딩이 완료된 후 즉시 다음 씬으로 활성화합니다. Any Key 로딩이 완료된 후 아무 키나 누르면 다음 씬이 활성화됩니다. Manual 로딩이 완료되면 스크립트에서 다음 씬을 수동으로 활성화합니다. 기타 설정 Minimum Loading Time 씬을 로드한 후 해당 씬으로 이동하는 데 사용되는 최소 시간을 설정합니다. Destroy On Completed true로 설정하면 로딩이 완료된 후 Scene Loader 객체가 삭제됩니다. Editor Auto Load Additive에 등록한 씬을 에디터에서 자동으로 로드할지 여부를 설정합니다. (Editor Only) Use Async (Additive Only) true로 설정하면 씬을 비동기식으로 로드합니다. (false 권장) Tip 'Destroy On Completed'는 Additive Style 또는 Scene Loading 프리팹을 구성할 때 유용합니다. 이벤트 On Loading (Single) 로드하는 동안 호출됩니다. On Load Completed 씬 로드가 완료되면 호출됩니다. On Completed 씬 로드가 완료되고 씬이 활성화되면 호출됩니다."
  },
  "manual/SceneReference.html": {
    "href": "manual/SceneReference.html",
    "title": "Scene Reference | Scene System",
    "keywords": "Scene Reference Scene System은 Scene Reference를 지원합니다. Scene System은 Scene Reference를 설치하는 두 가지 방법을 제공합니다. Scene System Wizard를 이용한 설치 Git UPM을 사용하여 설치 Scene System Wizard를 이용한 설치 유니티 상단에 Tools > Scene System > Scene System Wizard. Scene System Wizard를 사용하면 Scene System과 함께 Scene Reference도 설치할 수 있습니다. Warning 내부에서 Git UPM을 사용하여 설치하므로 Git이 필요합니다. Git UPM을 사용하여 설치 https://github.com/NK-Studio/SceneReference.git#UPM 유니티 상단에 Window > Package Manager > + > Add package from git URL... 입력창에 위 주소를 입력하고 추가 버튼을 클릭하면 설치가 완료됩니다. 예제 코드 using UnityEngine; using UnityEngine.SceneSystem; public class Example : MonoBehaviour { public SceneReference nextScene; private void Start() { // 씬을 로드합니다. Scenes.LoadSceneAsync(nextScene); // 씬 레퍼런스의 경로를 가져옵니다. Debug.Log(nextScene.Path); } }"
  },
  "manual/Scenes.html": {
    "href": "manual/Scenes.html",
    "title": "Scenes | Scene System",
    "keywords": "Scenes Namespace using UnityEngine.SceneSystem; Scene System을 사용하는 경우 코드 시작 부분에 다음 줄을 추가하십시오. using UnityEngine; using UnityEngine.SceneManagement; using UnityEngine.SceneSystem; void Example() { // BuildSettings Index를 사용하여 씬 로드 Scenes.LoadSceneAsync(0); // 씬 이름으로 씬 로드 Scenes.LoadSceneAsync(\"SceneName\", LoadSceneMode.Additive); // 동기 로딩도 가능 Scenes.LoadScene(0); // BuildSettings 인덱스에서 씬을 언로드합니다. Scenes.UnloadSceneAsync(0); // 씬 이름으로 씬 언로드 Scenes.UnloadSceneAsync(\"SceneName\"); // 동기식 언로드도 가능합니다 Scenes.UnloadScene(0); } 여러 씬을 동시에 로드/언로드하는 것도 가능합니다. // 여러 씬을 동시에 로드합니다(LoadSceneMode는 중독성만 해당). Scenes.LoadScenesAsync(\"Scene1\", \"Scene2\", \"Scene3\"); // 여러 씬을 동시에 언로드 Scenes.UnloadScenesAsync(\"Scene1\", \"Scene2\"); LoadScenesAsync의 경우에만 LoadMultiSceneMode를 설정하여 여러 씬을 로드하는 동작을 설정할 수 있습니다. // 여러 씬을 동시에 로드 Scenes.LoadScenesAsync(LoadMultiSceneMode.Parallel, \"Scene1\", \"Scene2\", \"Scene3\"); // 여러 씬을 하나씩 로드 Scenes.LoadScenesAsync(LoadMultiSceneMode.Sequential, \"Scene1\", \"Scene2\");"
  },
  "manual/SceneSystemAndUniRx.html": {
    "href": "manual/SceneSystemAndUniRx.html",
    "title": "SceneSystem + UniRx | Scene System",
    "keywords": "SceneSystem + UniRx UniRx를 도입함으로써 장면 로딩과 관련된 관찰 가능한 이벤트가 가능해졌습니다. 씬 로딩/언로드 이벤트와 활성 씬 전환 이벤트를 IObservable로 가져오려면 다음과 같이 작성하세요. using UnityEngine.SceneSystem; using UniRx; void Example() { Scenes.OnSceneLoadedAsObservable().Subscribe(x => { var scene = x.scene; var loadSceneMode = x.loadSceneMode; Debug.Log(\"scene loaded\"); }); Scenes.OnSceneUnloadedAsObservable().Subscribe(scene => { Debug.Log(\"scene unloaded\"); }); Scenes.OnActiveSceneChangedAsObservable().Subscribe(x => { var current = x.current; var next = x.next; Debug.Log(\"active scene changed\"); }); } SceneContainer 이벤트를 IObservable로 가져오는 것도 가능합니다. SceneContainer container; void Example() { container.OnBeforePushAsObservable().Subscribe(x => { Debug.Log(\"Current: \" + x.current + \" Next: \" + x.next); }); container.OnAfterPushAsObservable().Subscribe(x => { Debug.Log(\"Current: \" + x.current + \" Next: \" + x.next); }); container.OnBeforePopAsObservable().Subscribe(x => { Debug.Log(\"Current: \" + x.current + \" Next: \" + x.next); }); container.OnAfterPopAsObservable().Subscribe(x => { Debug.Log(\"Current: \" + x.current + \" Next: \" + x.next); }); }"
  },
  "manual/SceneSystemAndUniTask.html": {
    "href": "manual/SceneSystemAndUniTask.html",
    "title": "Scene System + UniTask | Scene System",
    "keywords": "Scene System + UniTask UniTask를 도입함으로써 UniTask로 LoadSceneOperationHandle을 기다리는 것이 가능해졌습니다. ToUniTask를 사용하여 LoadSceneOperationHandle을 UniTask로 변환합니다. using UnityEngine.SceneSystem; using Cysharp.Threading.Tasks; async UniTaskVoid ExampleAsync() { await Scenes.LoadAsync(\"SceneName\").ToUniTask(); }"
  },
  "node_modules/jetbrains-mono-webfont/README.html": {
    "href": "node_modules/jetbrains-mono-webfont/README.html",
    "title": "jetbrains-mono-webfont | Scene System",
    "keywords": "jetbrains-mono-webfont A webfont package for the JetBrains Mono typeface. For more information about the typeface, see JetBrains Mono's website. NPM npm install --save jetbrains-mono-webfont License jetbrains-mono-webfont © Chawye Hsu. Released under the MIT License. The JetBrains Mono typeface is available under the SIL Open Font License 1.1 license. Blog · GitHub @chawyehsu · Twitter @chawyehsu"
  }
}